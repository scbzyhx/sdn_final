# Copyright 2008 (C) Nicira, Inc.
# 
# This file is part of NOX.
# 
# NOX is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# NOX is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NOX.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------
#
# This app just drops to the python interpreter.  Useful for debugging
#
from nox.lib.core import *
import nox.lib.pyopenflow as of
from nox.coreapps.pyrt.pycomponent import *
from nox.netapps.routing import pyrouting
from nox.netapps.topology.pytopology import pytopology
from nox.netapps.monitoring.monitoring import Monitoring
from nox.netapps.authenticator.pyflowutil import Flow_in_event

from nox.lib.netinet import netinet
from nox.lib.util import set_match

from nox.lib.netinet import netinet

from twisted.python import log
import logging

log = logging.getLogger('nox.netapps.firewall.pyfirewall')
INTERVAL = 5

#a dict to record xid


class pyfirewall(Component):

    def __init__(self, ctxt):
        self.ctxt_ = ctxt
        Component.__init__(self, ctxt)
        self.registered_ip = {}
        self.dp_stats ={}
        print dir(ctxt)

    def install(self):
        '''start a thread to receive message from victim servers
           and response to the request
        '''
        self.register_for_flow_stats_in(self.flow_stats_in_handler)
        self.register_for_datapath_join(self.handle_datapath_join_in)
        self.pytop = self.resolve(pytopology)
        self.monitoring = self.resolve(Monitoring)
        self.post_callback(INTERVAL,self.send_flow_stats_requests)

    def handle_datapath_join_in(self,dpid,stats):
        '''datapath_join_in event handler
        '''
        print "%.16x" %dpid
        stats['dpid'] = dpid
        self.dp_stats[dpid] = stats
        port_list = self.dp_stats[dpid]['ports']
        self.dp_stats[dpid]['ports'] = []

        for port in port_list:
            if int(port['port_no']) > 1000: #may be local port
                continue
            self.dp_stats[dpid]['ports'].append(int(port['port_no']))
        print self.dp_stats[dpid]['ports']

        

    def getInterface(self):
        return str(pyfirewall)

    def handle_flow_in(self,event):
        pass
    def handle_flow_in(self, event):
    
    
        if not event.active:
            return CONTINUE
        indatapath = netinet.create_datapathid_from_host(event.datapath_id)
        route = pyrouting.Route()
        
        sloc = event.route_source
        if sloc == None:
            sloc = event.src_location['sw']['dp']
            route.id.src = netinet.create_datapathid_from_host(sloc)
            inport = event.src_location['port']
            sloc = sloc | (inport << 48)
        else:
            route.id.src = netinet.create_datapathid_from_host(sloc & DP_MASK)
            inport = (sloc >> 48) & PORT_MASK
        if len(event.route_destinations) > 0:
            dstlist = event.route_destinations
        else:
            dstlist = event.dst_locations
        
        checked = False
        for dst in dstlist:
            if isinstance(dst, dict):
                if not dst['allowed']:
                    continue
                dloc = dst['authed_location']['sw']['dp']
                route.id.dst = netinet.create_datapathid_from_host(dloc & DP_MASK)
                outport = dst['authed_location']['port']
                dloc = dloc | (outport << 48)
            else:
                dloc = dst
                route.id.dst = netinet.create_datapathid_from_host(dloc & DP_MASK)
                outport = (dloc >> 48) & PORT_MASK
            if dloc == 0:
                continue
            if self.routing.get_route(route):
                checked = True
                if self.routing.check_route(route, inport, outport):
                    log.debug('Found route %s.' % hex(route.id.src.as_host())+\
                            ':'+str(inport)+' to '+hex(route.id.dst.as_host())+\
                            ':'+str(outport))
                    if route.id.src == route.id.dst:
                        firstoutport = outport
                    else:
                        firstoutport = route.path[0].outport
                    
                    p = []
                    if route.id.src == route.id.dst:
                        p.append(str(inport))
                        p.append(str(indatapath))
                        p.append(str(firstoutport))
                    else:
                        s2s_links = len(route.path)
                        p.append(str(inport))
                        p.append(str(indatapath))
                        for i in range(0,s2s_links):
                            p.append(str(route.path[i].dst))
                        p.append(str(outport))
                            
                    self.routing.setup_route(event.flow, route, inport, \
                                    outport, FLOW_TIMEOUT, [], True)
                                    
                    # Send Barriers                
                    pending_route = []
                    #log.debug("Sending BARRIER to switches:")
                    # Add barrier xids
                    for dpid in p[1:len(p)-1]:
                        log.debug("Sending barrier to %s", dpid)
                        pending_route.append(self.send_barrier(int(dpid,16)))
                    # Add packetout info
                    pending_route.append([indatapath, inport, event])
                    # Store new pending_route (waiting for barrier replies)
                    self.pending_routes.append(pending_route)
                           
                    # send path to be highlighted to GUI
                    self.send_to_gui("highlight",p)
                    
                    # Send packet out (do it after receiving barrier(s))
                    if indatapath == route.id.src or \
                        pyrouting.dp_on_route(indatapath, route):
                        pass
                        #self.routing.send_packet(indatapath, inport, \
                        #    openflow.OFPP_TABLE,event.buffer_id,event.buf,"", \
                        #    False, event.flow)
                    else:
                        log.debug("Packet not on route - dropping.")
                    return CONTINUE
                else:
                    log.debug("Invalid route between %s." \
                        % hex(route.id.src.as_host())+':'+str(inport)+' to '+\
                        hex(route.id.dst.as_host())+':'+str(outport))
            else:
                log.debug("No route between %s and %s." % \
                    (hex(route.id.src.as_host()), hex(route.id.dst.as_host())))
        if not checked:
            if event.flow.dl_dst.is_broadcast():
                log.debug("Setting up FLOOD flow on %s", str(indatapath))
                self.routing.setup_flow(event.flow, indatapath, \
                    openflow.OFPP_FLOOD, event.buffer_id, event.buf, \
                        BROADCAST_TIMEOUT, "", \
                        event.flow.dl_type == htons(ethernet.IP_TYPE))
            else:
                inport = ntohs(event.flow.in_port)
                log.debug("Flooding")
                self.routing.send_packet(indatapath, inport, \
                    openflow.OFPP_FLOOD, \
                    event.buffer_id, event.buf, "", \
                    event.flow.dl_type == htons(ethernet.IP_TYPE),\
                    event.flow)
        else:
            log.debug("Dropping packet")

        return CONTINUE


    #send flow stats request periodically
    def send_flow_stats_requests(self):
        #send request to all switches
        #self.monitoring.send_flow_stats_request()
        dpids = self.pytop.get_datapaths();
        for dpid in dpids:
            #print type(dpid)
            flow = of.ofp_match()
            flow.wildcards = of.OFPFW_ALL
            
            attrs = {}
            attrs[core.NW_DST] = convert_to_ipaddr("192.168.0.51")
            #attrs[core.IN_PORT]
            a = set_match(attrs)

            #print type(flow)
            #print type(a)
            #print type(of.ofp_match)
            self.monitoring.send_flow_stats_request(dpid.as_host(),a,0xff)
   
            #print self.monitoring.get_latest_switch_stats(dpid.as_host())
            #self.send_flow_stats_request
        self.post_callback(INTERVAL,self.send_flow_stats_requests)
    def flow_stats_in_handler(self,dpid,flows,more,xid):
        '''handler for flow stats in event, flows is a dict, one for
           each flow with keys:
           TABLE_ID,MATCH,COOKIE,DUR_SEC,DUR_NSEC,PRIORITY,IDLE_TO,HARD_TO
           PACKET_COUNT,BYTE_COUNT
           @more is a bool,xid is an request id
        '''
        print 'flow_stats_in_handler'
        print(dpid,more,xid)
        print flows


def getFactory():
    class Factory:
        def instance(self, ctxt):
            return pyfirewall(ctxt)

    return Factory()
